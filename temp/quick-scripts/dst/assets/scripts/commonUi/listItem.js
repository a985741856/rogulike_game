
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/commonUi/listItem.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'a9fb9LTyU1DZathDbRN8oF1', 'listItem');
// scripts/commonUi/listItem.js

"use strict";

/******************************************
 * @author kL <klk0@qq.com>
 * @date 2019/5/15
 * @doc 列表Item组件.
 * 说明：
 *      1、此组件须配合list组件使用。（配套的配套的..）
 * @end
 ******************************************/
var SelectedType = cc.Enum({
  NONE: 0,
  TOGGLE: 1,
  //单一（单个Node显示/隐藏）
  SWITCH: 2 //切换(单个Sprite切换SpriteFrame)

});
cc.Class({
  editor: {
    disallowMultiple: false,
    menu: '自定义组件/list Item',
    executionOrder: -5001 //先于list

  },
  "extends": cc.Component,
  properties: {
    icon: {
      "default": null,
      type: cc.Sprite
    },
    title: cc.Node,
    selectedMode: {
      "default": SelectedType.NONE,
      type: SelectedType,
      tooltip: CC_DEV && '选择模式' // get: function () {
      //     return this._slideType;
      // },
      // set: function (val) {
      //     if (val != null)
      //         this._slideType = val;
      // }

    },
    selectedFlag: {
      "default": null,
      type: cc.Node,
      visible: function visible() {
        var bool = this.selectedMode > 0;
        if (!bool) this.selectedFlag = null;
        return bool;
      }
    },
    selectedSpriteFrame: {
      "default": null,
      type: cc.SpriteFrame,
      visible: function visible() {
        var bool = this.selectedMode == SelectedType.SWITCH;
        if (!bool) this.selectedSpriteFrame = null;
        return bool;
      }
    },
    adaptiveSize: {
      "default": false,
      tooltip: CC_DEV && '自适应尺寸（宽或高）'
    },
    _selected: false,
    selected: {
      visible: false,
      get: function get() {
        return this._selected;
      },
      set: function set(val) {
        this._selected = val;
        if (!this.selectedFlag) return;

        switch (this.selectedMode) {
          case SelectedType.TOGGLE:
            this.selectedFlag.active = val;
            break;

          case SelectedType.SWITCH:
            this.selectedFlag.spriteFrame = val ? this.selectedSpriteFrame : this._unselectedSpriteFrame;
            break;
        }
      }
    },
    _btnCom: null,
    btnCom: {
      visible: false,
      get: function get() {
        if (!this._btnCom) this._btnCom = this.node.getComponent(cc.Button);
        return this._btnCom;
      }
    }
  },
  onLoad: function onLoad() {
    //强行把文字组件转换给title...方便使用
    if (this.title) {
      var com = this.title.getComponent(cc.Label);
      if (!com) com = this.title.getComponent(cc.RichText);
      this.title = com;
    } // //没有按钮组件的话，selectedFlag无效
    // if (!this.btnCom)
    //     this.selectedMode == SelectedType.NONE;
    //有选择模式时，保存相应的东西


    if (this.selectedMode == SelectedType.SWITCH) {
      var _com = this.selectedFlag.getComponent(cc.Sprite);

      this.selectedFlag = _com;
      this._unselectedSpriteFrame = _com.spriteFrame;
    }
  },
  onDestroy: function onDestroy() {
    this.node.off(cc.Node.EventType.SIZE_CHANGED, this._onSizeChange, this);
  },
  _registerEvent: function _registerEvent() {
    if (!this.eventReg) {
      if (this.btnCom && this._list.selectedMode > 0) {
        this.btnCom.clickEvents.unshift(this.createEvt(this, 'onClickThis'));
      }

      if (this.adaptiveSize) {
        this.node.on(cc.Node.EventType.SIZE_CHANGED, this._onSizeChange, this);
      }

      this.eventReg = true;
    }
  },
  _onSizeChange: function _onSizeChange() {
    this._list._onItemAdaptive(this.node);
  },

  /**
   * 创建事件
   * @param {cc.Component} component 组件脚本
   * @param {string} handlerName 触发函数名称
   * @param {cc.Node} node 组件所在node（不传的情况下取component.node）
   * @returns cc.Component.EventHandler
   */
  createEvt: function createEvt(component, handlerName, node) {
    if (!component.isValid) return; //有些异步加载的，节点以及销毁了。

    component.comName = component.comName || component.name.match(/\<(.*?)\>/g).pop().replace(/\<|>/g, '');
    var evt = new cc.Component.EventHandler();
    evt.target = node || component.node;
    evt.component = component.comName;
    evt.handler = handlerName;
    return evt;
  },
  showAni: function showAni(aniType, callFunc, del) {
    var t = this;
    var tween;

    switch (aniType) {
      case 0:
        //向上消失
        tween = cc.tween(t.node).to(.2, {
          scale: .7
        }).by(.3, {
          y: t.node.height * 2
        });
        break;

      case 1:
        //向右消失
        tween = cc.tween(t.node).to(.2, {
          scale: .7
        }).by(.3, {
          x: t.node.width * 2
        });
        break;

      case 2:
        //向下消失
        tween = cc.tween(t.node).to(.2, {
          scale: .7
        }).by(.3, {
          y: t.node.height * -2
        });
        break;

      case 3:
        //向左消失
        tween = cc.tween(t.node).to(.2, {
          scale: .7
        }).by(.3, {
          x: t.node.width * -2
        });
        break;

      default:
        //默认：缩小消失
        tween = cc.tween(t.node).to(.3, {
          scale: .1
        });
        break;
    }

    if (callFunc || del) {
      tween.call(function () {
        if (del) {
          t._list._delSingleItem(t.node);

          for (var n = t._list.displayData.length - 1; n >= 0; n--) {
            if (t._list.displayData[n].listId == t.node._listId) {
              t._list.displayData.splice(n, 1);

              break;
            }
          }
        }

        callFunc();
      });
    }

    tween.start();
  },
  onClickThis: function onClickThis() {
    this._list.selectedId = this.node._listId;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,