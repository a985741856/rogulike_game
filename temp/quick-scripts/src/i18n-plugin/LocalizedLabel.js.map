{"version":3,"sources":["packages\\i18n\\runtime-scripts\\LocalizedLabel.js"],"names":["i18n","require","debounce","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","cc","Class","Component","editor","executeInEditMode","menu","properties","dataID","get","_dataID","set","val","CC_EDITOR","_debouncedUpdateLabel","updateLabel","onLoad","inst","init","fetchRender","label","getComponent","Label","error","localizedString","t","string"],"mappings":";;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAApB,EAEA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,SAA9B,EAAyC;AACrC,MAAIC,OAAJ;AACA,SAAO,YAAW;AACd,QAAIC,OAAO,GAAG,IAAd;AAAA,QAAoBC,IAAI,GAAGC,SAA3B;;AACA,QAAIC,KAAK,GAAG,SAARA,KAAQ,GAAW;AACnBJ,MAAAA,OAAO,GAAG,IAAV;AACA,UAAI,CAACD,SAAL,EAAgBF,IAAI,CAACQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AACnB,KAHD;;AAIA,QAAII,OAAO,GAAGP,SAAS,IAAI,CAACC,OAA5B;AACAO,IAAAA,YAAY,CAACP,OAAD,CAAZ;AACAA,IAAAA,OAAO,GAAGQ,UAAU,CAACJ,KAAD,EAAQN,IAAR,CAApB;AACA,QAAIQ,OAAJ,EAAaT,IAAI,CAACQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AAChB,GAVD;AAWH;;AAEDO,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,MAAM,EAAE;AACJC,IAAAA,iBAAiB,EAAE,IADf;AAEJC,IAAAA,IAAI,EAAE;AAFF,GAHH;AAQLC,EAAAA,UAAU,EAAE;AACRC,IAAAA,MAAM,EAAE;AACJC,MAAAA,GADI,iBACG;AACH,eAAO,KAAKC,OAAZ;AACH,OAHG;AAIJC,MAAAA,GAJI,eAICC,GAJD,EAIM;AACN,YAAI,KAAKF,OAAL,KAAiBE,GAArB,EAA0B;AACtB,eAAKF,OAAL,GAAeE,GAAf;;AACA,cAAIC,SAAJ,EAAe;AACX,iBAAKC,qBAAL;AACH,WAFD,MAEO;AACH,iBAAKC,WAAL;AACH;AACJ;AACJ;AAbG,KADA;AAgBRL,IAAAA,OAAO,EAAE;AAhBD,GARP;AA2BLM,EAAAA,MA3BK,oBA2BK;AACN,QAAGH,SAAH,EAAc;AACV,WAAKC,qBAAL,GAA6B1B,QAAQ,CAAC,KAAK2B,WAAN,EAAmB,GAAnB,CAArC;AACH;;AACD,QAAI,CAAC7B,IAAI,CAAC+B,IAAV,EAAgB;AACZ/B,MAAAA,IAAI,CAACgC,IAAL;AACH,KANK,CAON;;;AACA,SAAKC,WAAL;AACH,GApCI;AAsCLA,EAAAA,WAtCK,yBAsCU;AACX,QAAIC,KAAK,GAAG,KAAKC,YAAL,CAAkBpB,EAAE,CAACqB,KAArB,CAAZ;;AACA,QAAIF,KAAJ,EAAW;AACP,WAAKA,KAAL,GAAaA,KAAb;AACA,WAAKL,WAAL;AACA;AACH;AACJ,GA7CI;AA+CLA,EAAAA,WA/CK,yBA+CU;AACX,QAAI,CAAC,KAAKK,KAAV,EAAiB;AACbnB,MAAAA,EAAE,CAACsB,KAAH,CAAS,+DAAT;AACA;AACH;;AACD,QAAIC,eAAe,GAAGtC,IAAI,CAACuC,CAAL,CAAO,KAAKjB,MAAZ,CAAtB;;AACA,QAAIgB,eAAJ,EAAqB;AACjB,WAAKJ,KAAL,CAAWM,MAAX,GAAoBxC,IAAI,CAACuC,CAAL,CAAO,KAAKjB,MAAZ,CAApB;AACH;AACJ;AAxDI,CAAT","sourceRoot":"/","sourcesContent":["const i18n = require('LanguageData');\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\nfunction debounce(func, wait, immediate) {\n    var timeout;\n    return function() {\n        var context = this, args = arguments;\n        var later = function() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n}\n\ncc.Class({\n    extends: cc.Component,\n\n    editor: {\n        executeInEditMode: true,\n        menu: 'i18n/LocalizedLabel'\n    },\n\n    properties: {\n        dataID: {\n            get () {\n                return this._dataID;\n            },\n            set (val) {\n                if (this._dataID !== val) {\n                    this._dataID = val;\n                    if (CC_EDITOR) {\n                        this._debouncedUpdateLabel();\n                    } else {\n                        this.updateLabel();\n                    }\n                }\n            }\n        },\n        _dataID: ''\n    },\n    \n    onLoad () {\n        if(CC_EDITOR) {\n            this._debouncedUpdateLabel = debounce(this.updateLabel, 200);\n        }\n        if (!i18n.inst) {\n            i18n.init();\n        }\n        // cc.log('dataID: ' + this.dataID + ' value: ' + i18n.t(this.dataID));\n        this.fetchRender();\n    },\n\n    fetchRender () {\n        let label = this.getComponent(cc.Label);\n        if (label) {\n            this.label = label;\n            this.updateLabel();\n            return;\n        } \n    },\n\n    updateLabel () {\n        if (!this.label) {\n            cc.error('Failed to update localized label, label component is invalid!');\n            return;\n        }\n        let localizedString = i18n.t(this.dataID);\n        if (localizedString) {\n            this.label.string = i18n.t(this.dataID);\n        }\n    }\n});"]}