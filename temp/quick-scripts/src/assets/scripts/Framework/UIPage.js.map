{"version":3,"sources":["assets\\scripts\\Framework\\UIPage.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { utils } from \"../../common-plugin/Scripts/Utils\";\r\nimport { cocosz } from \"./CocosZ\";\r\nimport UIMgr from \"./UIMgr\";\r\n\r\n\r\nexport default class UIPage {\r\n\r\n    protected _page: cc.Node = null;\r\n    protected _pageName: string = \"\";\r\n    /** 页面状态 */\r\n    protected _isOpen: boolean = false;\r\n    /** 记录页面插屏次数 */\r\n    public static interstitialCount: { [name: string]: number } = {};\r\n\r\n    constructor(pageName: string) {\r\n        let prefab: cc.Prefab = cocosz.resMgr.getRes(pageName, cc.Prefab);\r\n        if (prefab) {\r\n            let node: cc.Node = cc.instantiate(prefab);\r\n            if (node) {\r\n                this._page = node;\r\n                this._pageName = pageName;\r\n                node.active = false;\r\n                node.position = cc.Vec3.ZERO;\r\n                this._isOpen = false;\r\n                this.getUIRoot().addChild(node);\r\n                node.group = 'ui';\r\n            }\r\n        } else {\r\n            cocosz.resMgr.loadAndCacheRes(\"UI/\" + pageName, cc.Prefab, null, (err: Error, res: any) => {\r\n                if (res) {\r\n                    let node: cc.Node = cc.instantiate(res);\r\n                    if (node) {\r\n                        this._page = node;\r\n                        this._pageName = pageName;\r\n                        node.active = false;\r\n                        node.position = cc.Vec3.ZERO;\r\n                        this._isOpen = false;\r\n                        this.getUIRoot().addChild(node);\r\n                        node.group = 'ui';\r\n                        this.onLoad();\r\n                        this.open();\r\n                    }\r\n                } else {\r\n                    cc.error(`Prefab ${pageName} is not found!`);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    public open() {\r\n        if (this.isValid()) {\r\n            if (!this._isOpen) {\r\n                // 恢复开关\r\n                // UIMgr.canOpen = true;\r\n                // 打开界面\r\n                this._isOpen = true;\r\n                this._page.active = true;\r\n                this.onOpen();\r\n                // 插屏\r\n                let serverValue = cocosz.getConfigByKey(\"isInterstitial_\" + this._pageName);\r\n                if (serverValue) {\r\n                    // 每次都弹\r\n                    if (serverValue === \"true\") {\r\n                        cocosz.isShowAd && utils.adManager.ShowInterstitial();\r\n                    }\r\n                    // 几次弹一次\r\n                    else if ((Number.isInteger(serverValue) && serverValue > 0)) {\r\n                        if (!UIPage.interstitialCount[this._pageName]) { UIPage.interstitialCount[this._pageName] = 0; }\r\n                        if (++UIPage.interstitialCount[this._pageName] % serverValue === 0) {\r\n                            cocosz.isShowAd && utils.adManager.ShowInterstitial();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            cc.log(\"Page is not found!\");\r\n        }\r\n    }\r\n\r\n    public close() {\r\n        if (this._isOpen) {\r\n            this._isOpen = false;\r\n            this.onClose();\r\n        }\r\n        if (this.isValid()) {\r\n            this._page.active = false;\r\n            this.destroy();\r\n        }\r\n        // 资源销毁\r\n        if (\"UILoadingPage\" === this._pageName) {\r\n            cocosz.resMgr.releaseSingleRes(this._pageName, cc.Prefab);\r\n        }\r\n    }\r\n\r\n    public destroy() {\r\n        if (this._isOpen) {\r\n            this._isOpen = false;\r\n        }\r\n        this.onDestroy();\r\n        // 销毁界面\r\n        if (this.isValid()) {\r\n            this._page.destroy();\r\n        }\r\n    }\r\n\r\n    protected getUIRoot() {\r\n        return cc.find(\"Canvas\");\r\n    }\r\n\r\n    public isValid() {\r\n        return this._page && cc.isValid(this._page);\r\n    }\r\n\r\n    public isOpen(): boolean {\r\n        return this.isValid() && this._isOpen;\r\n    }\r\n\r\n    /**\r\n     * 子类扩展：页面初始化时调用，注意不是引擎周期函数,此时引擎周期函数还没有调用\r\n     */\r\n    protected onLoad() {\r\n    }\r\n    /**\r\n     * 子类扩展：页面展示时调用\r\n     */\r\n    protected onOpen() { }\r\n    /**\r\n     * 子类扩展：页面关闭时调用\r\n     */\r\n    protected onClose() { }\r\n    /**\r\n     * 子类扩展：页面销毁时调用\r\n     */\r\n    protected onDestroy() { }\r\n\r\n\r\n    // private _playShowAnimation(){\r\n    //     let animations: cc.Animation[] = this._page.getComponentsInChildren(cc.Animation);\r\n    //     if(animations){\r\n    //         for(let i=0;i<animations.length;i++){\r\n    //             let anim: cc.Animation = animations[i];\r\n    //             let clip: cc.AnimationClip = anim.defaultClip;\r\n    //             clip.wrapMode = cc.WrapMode.Normal;\r\n    //             anim.play(clip.name);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // private _playHideAnimation(){\r\n    //     let animations: cc.Animation[] = this._page.getComponentsInChildren(cc.Animation);\r\n    //     if(animations){\r\n    //         for(let i=0;i<animations.length;i++){\r\n    //             let anim: cc.Animation = animations[i];\r\n    //             let clip: cc.AnimationClip = anim.defaultClip;\r\n    //             clip.wrapMode = cc.WrapMode.Reverse;\r\n    //             anim.play(clip.name);\r\n    //         }\r\n    //     }\r\n    // }\r\n}\r\n"]}