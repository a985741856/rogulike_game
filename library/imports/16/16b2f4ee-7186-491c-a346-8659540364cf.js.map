{"version":3,"sources":["assets\\scripts\\Framework\\ResMgr.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\nimport { cocosz } from \"./CocosZ\";\r\n\r\nexport default class ResMgr {\r\n\r\n    private static _inst: ResMgr;\r\n    public static get inst(): ResMgr {\r\n        if (!ResMgr._inst) {\r\n            ResMgr._inst = new ResMgr();\r\n            ResMgr._inst._init();\r\n        }\r\n        return ResMgr._inst;\r\n    }\r\n\r\n    private _prefabDic: any = {};\r\n    private _imgDic: any = {};\r\n    private _atlasDic: any = {};\r\n    private _audioDic: any = {};\r\n    private _jsonDic: any = {};\r\n\r\n\r\n\r\n    private _init() {\r\n        // 根据平台做对应设置\r\n    }\r\n\r\n    /**\r\n    * 缓存cocosz的音效\r\n    * @param res \r\n    */\r\n    public cacheCocoszAudio() {\r\n        for (let i = 0; i < cocosz.audioList.length; i++) {\r\n            const res = cocosz.audioList[i];\r\n            this._cacheRes(res, cc.AudioClip);\r\n        }\r\n        cocosz.audioList = null;\r\n    }\r\n\r\n    /**\r\n     * 加载资源\r\n     * @param path 资源路径\r\n     * @param type 资源类型\r\n     * @param complete 加载完成回调\r\n     */\r\n    public loadRes(path: string, type: typeof cc.Asset, progress: Function, complete: Function) {\r\n        let bundle = cocosz.getBundleWithPath(path);\r\n        if (bundle) {\r\n            bundle.load(path, type, (completedCount: number, totalCount: number, item: any) => {\r\n                progress && progress(completedCount, totalCount, item);\r\n            }, (error: Error, resource: any) => {\r\n                if (error) {\r\n                    cc.log(\"加载资源\", path, \"失败\");\r\n                }\r\n                complete && complete(error, resource);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载资源数组并且添加到本地缓存\r\n     * @param url 资源路径数组\r\n     * @param type 资源类型\r\n     * @param progress 加载进度回调\r\n     * @param complete 加载完成回调\r\n     */\r\n    public loadAndCacheResArray(urls: any[], type: typeof cc.Asset, progress: Function, complete: Function) {\r\n        for (let i = 0; i < urls.length; i++) {\r\n            this.loadAndCacheRes(urls[i], type, progress, complete);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载资源并且添加到本地缓存\r\n     * @param url 资源路径\r\n     * @param type 资源类型\r\n     * @param progress 加载进度回调\r\n     * @param complete 加载完成回调\r\n     */\r\n    public loadAndCacheRes(url: any, type: typeof cc.Asset, progress: Function, complete: Function) {\r\n        let path = url.path ? url.path : url;\r\n        let bundle = cocosz.getBundleWithPath(path);\r\n        if (bundle) {\r\n            bundle.load(path, type, (completedCount: number, totalCount: number, item: any) => {\r\n                progress && progress(completedCount, totalCount, item);\r\n            }, (error: Error, resource: any) => {\r\n                if (error) {\r\n                    cc.log(\"加载缓存资源\", path, \"失败\");\r\n                } else {\r\n                    this._cacheRes(resource, type);\r\n                }\r\n                complete && complete(error, resource);\r\n            });\r\n        }\r\n    }\r\n\r\n    private _cacheRes(res: any, type: typeof cc.Asset) {\r\n        if (type == cc.Prefab) {\r\n            this._cachPrefab(res);\r\n        } else if (type == cc.SpriteFrame) {\r\n            this._cachTexture(res);\r\n        } else if (type == cc.SpriteAtlas) {\r\n            this._cachSpriteAtlas(res);\r\n        } else if (type == cc.AudioClip) {\r\n            this._cachAudioClip(res);\r\n        } else if (type == cc.JsonAsset) {\r\n            this._cachJsonAsset(res);\r\n        }\r\n    }\r\n\r\n    private _cachPrefab(res: cc.Prefab) {\r\n        if (res) {\r\n            res.addRef();\r\n            this._prefabDic[res.name] = res;\r\n        }\r\n    }\r\n\r\n    private _cachTexture(res: cc.SpriteFrame) {\r\n        if (res) {\r\n            res.addRef();\r\n            this._imgDic[res.name] = res;\r\n        }\r\n    }\r\n\r\n    private _cachSpriteAtlas(res: cc.SpriteAtlas) {\r\n        if (res) {\r\n            res.addRef();\r\n            this._atlasDic[res.name] = res;\r\n\r\n            let spframes: cc.SpriteFrame[] = res.getSpriteFrames();\r\n            for (let i = 0; i < spframes.length; i++) {\r\n                this._cachTexture(spframes[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _cachAudioClip(res: cc.AudioClip) {\r\n        if (res) {\r\n            res.addRef();\r\n            this._audioDic[res.name] = res;\r\n        }\r\n    }\r\n\r\n    private _cachJsonAsset(res: cc.JsonAsset) {\r\n        if (res) {\r\n            res.addRef();\r\n            this._jsonDic[res.name] = res;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取本地缓存资源\r\n     * @param name 资源名称\r\n     * @param type 类型\r\n     */\r\n    public getRes(name: string, type: typeof cc.Asset) {\r\n        switch (type) {\r\n            case cc.Prefab: {\r\n                return this._check(name, this._prefabDic[name]);\r\n            }\r\n            case cc.SpriteFrame: {\r\n                return this._check(name, this._imgDic[name]);\r\n            }\r\n            case cc.AudioClip: {\r\n                return this._check(name, this._audioDic[name]);\r\n            }\r\n            case cc.JsonAsset: {\r\n                return this._check(name, this._jsonDic[name]);\r\n            }\r\n            default: {\r\n                cc.log(\"资源类型不存在：\" + type);\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _check(name: string, res: any) {\r\n        if (res && res.isValid) {\r\n            return res;\r\n        } else {\r\n            cc.log(\"资源不存在：\" + name);\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 释放一组资源\r\n     * @param urlList 资源路径数组\r\n     * @param type 资源类型\r\n     */\r\n    public releaseResArray(urlList: any[], type: typeof cc.Asset) {\r\n        urlList.forEach(url => {\r\n            let name = url.path.split(\"/\").pop();\r\n            if (name) {\r\n                this.releaseSingleRes(name, type);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 释放单个资源\r\n     * @param res 单个资源\r\n     */\r\n    public releaseSingleRes(name: string, type: typeof cc.Asset) {\r\n        switch (type) {\r\n            case cc.Prefab: {\r\n                if (this._prefabDic[name] && cc.isValid(this._prefabDic[name])) {\r\n                    this._prefabDic[name].decRef();\r\n                    cc.assetManager.releaseAsset(this._prefabDic[name]);\r\n                    this._prefabDic[name] = null;\r\n                    // cc.log(`释放Prefab资源 ${name} 成功！`);\r\n                }\r\n                break;\r\n            }\r\n            case cc.SpriteFrame: {\r\n                if (this._imgDic[name] && cc.isValid(this._imgDic[name])) {\r\n                    this._imgDic[name].decRef();\r\n                    cc.assetManager.releaseAsset(this._imgDic[name]);\r\n                    this._imgDic[name] = null;\r\n                    // cc.log(`释放SpriteFrame资源 ${name} 成功！`);\r\n                }\r\n                break;\r\n            }\r\n            case cc.SpriteAtlas: {\r\n                if (this._atlasDic[name] && cc.isValid(this._atlasDic[name])) {\r\n                    this._atlasDic[name].decRef();\r\n                    cc.assetManager.releaseAsset(this._atlasDic[name]);\r\n                    this._atlasDic[name] = null;\r\n                    // cc.log(`释放SpriteFrame资源 ${name} 成功！`);\r\n                }\r\n                break;\r\n            }\r\n            case cc.AudioClip: {\r\n                if (this._audioDic[name] && cc.isValid(this._audioDic[name])) {\r\n                    this._audioDic[name].decRef();\r\n                    cc.assetManager.releaseAsset(this._audioDic[name]);\r\n                    this._audioDic[name] = null;\r\n                    // cc.log(`释放AudioClip资源 ${name} 成功！`);\r\n                }\r\n                break;\r\n            }\r\n            case cc.JsonAsset: {\r\n                if (this._jsonDic[name] && cc.isValid(this._jsonDic[name])) {\r\n                    this._jsonDic[name].decRef();\r\n                    cc.assetManager.releaseAsset(this._jsonDic[name]);\r\n                    this._jsonDic[name] = null;\r\n                    // cc.log(`释放JsonAsset资源 ${name} 成功！`);\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                cc.log(\"释放资源的类型出错\");\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"]}